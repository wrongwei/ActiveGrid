
/* 
library to talk to the SD84 servo control board

This class provides easy access to the basic 
functions of the SD84 servo control board.  

The SD84 sends out pulse width modulated signals.  
The servos take the width of the pulse as a 
command to assume a certain angular position.  
There is no way to get feedback from the servo 
on its actual position.  
All the functions provided here interact only 
with the SD84 to set and retrieve the commanded 
servo angles.  

The SD84 is a USB device with an FTDI USB to 
serial converter chip on board: 
http://www.robot-electronics.co.uk/htm/sd84tech.htm

FTDI provides a driver that makes the SD84 look 
like a serial device: 
http://www.ftdichip.com/FTDrivers.htm

The class defined in gbserial.h provides a 
platform independent way to talk through the 
serial port.  

servo numbers start with 1 (not zero).  

Greg Bewley
September 2009
 */

#include <SD84.h>
#include <time.h>


// check whether the port initialized ok: 
int SD84::checkport(){
	if (portbroken)
		return -1; 
	
	return 1; 
}

// set a single servo to an angle in degrees: 
int SD84::setangle(int servo_number, double angle)
{
	int result = 0; 
	
	  // convert the angle to pulse width: 
	short int width = (short int) angle2width(angle); 
	
	cout << "SD84::setangle: channel " << servo_number << ", angle " << angle; 
	cout << " corresponds to " << width << " ms pulse width.  "; 
	cout << endl; 
	
	// set up the output buffer: 
	outputbuffer[3] = SET_SERVO; 
	outputbuffer[4] = servo_number; 
	outputbuffer[5] = 2;             // number of bytes coming
	outputbuffer[6] = width & 255;   // position low byte
	outputbuffer[7] = width >> 8;    // position high byte
	
//	int tempint = ((uchar) outputbuffer[7]<<8) + (uchar) outputbuffer[6]; 
//	cout << "SD84::set_servo: output buffer: " << tempint << " ms.  " << endl; 
	
	result += thePort.send(outputbuffer, 8); 
	result += thePort.receive(1, inputbuffer); 
	if ( (inputbuffer[0] == OK) & (result == 2) )
	  return 1; 
	
	return -1; 
}




  // set all servos to the same angle: 
int SD84::setangles(double angle)
{
  int result = 0; 
	 
  // convert angles to pulse widths: 
  short int width = (short int) angle2width(angle); 
  
  // set up the output buffer: 
  outputbuffer[3] = SET_SERVO; 
  outputbuffer[4] = 1; 
  outputbuffer[5] = MAXSERVOS * 2;        // number of bytes coming
  for (int i = 0; i < MAXSERVOS; i++)
    {
      outputbuffer[6+2*i] = width & 255;        // position low byte
      outputbuffer[7+2*i] = (width >> 8) & 255; // position high byte
    }
  result += thePort.send(outputbuffer, 6 + 2*MAXSERVOS); 
  result += thePort.receive(1, inputbuffer); 
  if ( (inputbuffer[0] == OK) & (result == 2) )
    return 1; 
  
  return -1; 
}

  // set several servos to different positions: 
int SD84::setangles(int first_servo, int num_of_servos, double angles[])
{
	int result = 0; 
	short int width; 
	
	  // set up the output buffer: 
	outputbuffer[3] = SET_SERVO; 
	outputbuffer[4] = first_servo; 
	outputbuffer[5] = num_of_servos * 2;        // number of bytes coming
	for (int i = 0; i < num_of_servos; i++)
	{
		  // convert angles to pulse widths: 
		width = (short int) angle2width(angles[i]); 
		outputbuffer[6+2*i] = width & 255;        // position low byte
		outputbuffer[7+2*i] = (width >> 8) & 255; // position high byte
	}

	//clock_t Begin, End;
	//Begin = clock() * CLK_TCK;
	result += thePort.send(outputbuffer, 6 + 2*num_of_servos); 
	//End = clock() * CLK_TCK; 
	//cout << "Just the send command: " << (End-Begin)/(1000) << endl;
	//Begin = clock() * CLK_TCK;
	result += thePort.receive(1, inputbuffer); 
	//End = clock() * CLK_TCK; 
	//cout << "Just the receiving command: " << (End-Begin)/(1000) << endl;
	if ( (inputbuffer[0] == OK) & (result == 2) )
		return 1; 
	
	return -1; 
}

  // get a single servo angle in degrees: 
double SD84::getangle(int servo_number)
{
	int result = 0; 
	
	outputbuffer[3] = GET_SERVO; 
	outputbuffer[4] = servo_number; 
	outputbuffer[5] = 0x00; 
	result += thePort.send(outputbuffer, 6); 
	result += thePort.receive(2, inputbuffer); 
	int temp = ((uchar) inputbuffer[1] << 8) + (uchar) inputbuffer[0]; 
//	cout << "SD84::get_servo: input buffer: " << temp << " ms.  " << endl; 
	return 	width2angle(temp); 
	//return (inputbuffer[1]<<8) + inputbuffer[0]; 
}

uchar * SD84::getTemp(int servo_number)
{
	int result = 0; 
	
	cout << "error" << endl;
	outputbuffer[3] = GET_INPUT; 
	outputbuffer[4] = servo_number; 
	outputbuffer[5] = 0x00;  
	cout << "error1" << endl;
	result += thePort.send(outputbuffer, 6); 
	cout << "error2" << endl; 
	result += thePort.receive(2, inputbuffer);
	cout << "error3" << endl;
	cout << inputbuffer[1] << endl;
	cout << inputbuffer[2] << endl;
	int temp = ((uchar) inputbuffer[1] << 8) + (uchar) inputbuffer[0]; 
	cout << "SD84::get_servo: input buffer: " << temp << " ms.  " << endl; 
	cout << "1: " << (uchar) inputbuffer[1] << endl;
	cout << "0: " << (uchar) inputbuffer[0] << endl;
	return 	inputbuffer; 
	//return (inputbuffer[1]<<8) + inputbuffer[0]; 
}

float SD84::getAnalog(int numberOfServo)
{
	int result = 0; 
	///cout << "SET_AD_CNT" << endl; 

	outputbuffer[3] = SET_AD_CNT; 
	outputbuffer[4] = 0; 
	outputbuffer[5] = 1;
	int numberOfAnalogueChannels=1;//number of analogue channels (now: only one channel)  
	outputbuffer[6] = numberOfAnalogueChannels;
	result += thePort.send(outputbuffer, 7); 
	///cout <<  (int)outputbuffer[6] << " channels set to analogue. " << endl;
	result += thePort.receive(1, inputbuffer);
	///if ( (inputbuffer[0] == OK) & (result == 2) )cout << numberOfAnalogueChannels << " Analogue Channels are set" << endl;
	///cout << endl;

	///cout << "GET_AD_CNT" << endl; 
	outputbuffer[3] = GET_AD_CNT; 
	outputbuffer[4] = 0; 
	outputbuffer[5] = 0;  
	result += thePort.send(outputbuffer, 6);
	result += thePort.receive(1, inputbuffer);
	///cout << "Number of analogue channels: " << (int) inputbuffer[0] << endl;
	///cout << endl;

	///cout << "GET_ADC" << endl;
	outputbuffer[3] = GET_ADC; 
	outputbuffer[4] = numberOfServo; 
	outputbuffer[5] = 0;     
	result += thePort.send(outputbuffer, 6); 
	result += thePort.receive(2, inputbuffer);
	int temp = (int)(((uchar) inputbuffer[1] << 8) + (uchar) inputbuffer[0]);
	///cout << "analogue value: " << temp << endl; 
	///cout << "low: " << (int) inputbuffer[0] << endl; // is correct
	///cout << "high: " << (int) inputbuffer[1] << endl; // 256 512 ..., e.g.: 3 means 256+512=768

 

	//float value=(float)temp;
	//return 0; 
	return (inputbuffer[1]<<8) + inputbuffer[0]; 
}


  // set the speed of a servo in seconds per rotation: 
int SD84::setspeed(int servo_number, double rotationrate)
{
	int result = 0; 
	
	  // convert the rotation rate to microsecond pulse widths per cycle: 
	int dW = rr2dwpc(rotationrate); 
	
	  // can't access speeds lower than 1 microsecond/cycle: 
	if (dW < 1)
		dW = 1; 
	
	speeds[servo_number-1] = dwpc2rr(dW); 
	
	  // the maximum speed is limited by the 1 byte we send the speed in; 
	  // the SD84 board makes position changes within one cycle when 
	  // the speed is set to zero, but we don't trouble the user with 
	  // this detail, and leave the user-visible "speed" setting alone: 
	if (dW > DWMAX)
		dW = 0; 
	
	  // set up the output buffer: 
	outputbuffer[3] = SET_SPEED; 
	outputbuffer[4] = servo_number;  // first servo number
	outputbuffer[5] = 1;             // number of bytes coming
	outputbuffer[6] = dW;            // pulse width increment per cycle
	
	result += thePort.send(outputbuffer, 7); 
	result += thePort.receive(1, inputbuffer); 
	if ( (inputbuffer[0] == OK) & (result == 2) )
		return 1; 
	
	return -1; 
}

  // set the speed of the servos in seconds per rotation: 
int SD84::setspeeds(double rotationrate)
{
	int result = 0; 
	
	  // convert the rotation rate to microsecond pulse widths per cycle: 
	int dW = rr2dwpc(rotationrate); 
	bool flag = true; 
	
	  // can't access speeds lower than 1 microsecond/cycle: 
	if (dW < 1)
	{
		dW = 1; 
		cout << "SD84::setspeeds: requested global speed below minimum, " << dwpc2rr(dW); 
		cout << " [rot/sec].  " << endl; 
		cout << "                 global speed adjusted up to minimum.  " << endl; 
		flag = false; 
	}
	
	  // store what we set the speed to: 
	speed = dwpc2rr(dW); 
	for (int i = 0; i < MAXSERVOS; i++)
		speeds[i] = speed; 
	
	  // the maximum speed is limited by the 1 byte we send the speed in; 
	  // the SD84 board makes position changes within one cycle when 
	  // the speed is set to zero, but we don't trouble the user with 
	  // this detail, and leave the user-visible "speed" setting alone: 
	if (dW > DWMAX)
	{
		dW = 0; 
		cout << "SD84::setspeeds: requested global speed above maximum, " << dwpc2rr(DWMAX); 
		cout << " [rot/sec].  " << endl; 
		cout << endl << "                 global speed set to maximum.  " << endl; 
		flag = false; 
	}
	
	if (flag)
		cout << "SD84::setspeeds: global servo speed set to " << speed << " [rot/sec].  " << endl; 
	
	cout << "                 pulse width increment " << dW << " [microsec/cycle].  " << endl; 
	
	  // set up the output buffer: 
	outputbuffer[3] = SET_SPEED; 
	outputbuffer[4] = 1;          // first servo number
	outputbuffer[5] = MAXSERVOS;  // number of bytes coming
	for (int i = 0; i < MAXSERVOS; i++)
		outputbuffer[6+i] = dW;   // pulse width increment per cycle
	
	result += thePort.send(outputbuffer, 6 + MAXSERVOS); 
	result += thePort.receive(1, inputbuffer); 
	if ( (inputbuffer[0] == OK) & (result == 2) )
		return 1; 
	
	return -1; 
}

// set several servos to different speeds: 
int SD84::setspeeds(int first_servo, int num_of_servos, double rotationrates[])
{
	int result = 0; 
	int dW[MAXSERVOS]; 
	
	for (int i = 0; i < num_of_servos; i++)
	{
		  // convert the rotation rate to microsecond pulse widths per cycle: 
	  dW[i] = (int)round(((rotationrates[i]/5.0)*1200.0)/180.0); 
	  //dW[i] = rr2dwpc(rotationrates[i]); 
	  //		cout << "dW: " << dW[i] << endl;
		  // can't access speeds lower than 1 microsecond/cycle: 
		if (dW[i] < 1)
			dW[i] = 1; 
		
		speeds[i+first_servo-1] = dwpc2rr(dW[i]); 
		
		  // the SD84 board makes position changes within one cycle when 
		  // the speed is set to zero: 
		if (dW[i] > DWMAX)
			dW[i] = 0; 
	}
	
	  // set up the output buffer: 
	outputbuffer[3] = SET_SPEED; 
	outputbuffer[4] = first_servo; 
	outputbuffer[5] = num_of_servos;        // number of bytes coming
	for (int i = 0; i < num_of_servos; i++)
		outputbuffer[6+i] = dW[i]; 
	
	result += thePort.send(outputbuffer, 6 + num_of_servos); 
	result += thePort.receive(1, inputbuffer); 
	if ( (inputbuffer[0] == OK) & (result == 2) )
		return 1; 
	
	return -1; 
}

  // board provides no means to get speeds.  the first function returns 
  // the last speed set *globally* using setspeeds (double), and will not 
  // return the correct speed of an individual servo whose speed was last 
  // set with setspeeds(int, int, double).  the second function returns 
  // the speed of the specified servo, which will always correspond to 
  // the last speed the servo was set to.  
double SD84::getspeed()
{
	return speed; 
}
double SD84::getspeed(int servo_number)
{
	return speeds[servo_number-1]; 
}

  // Fastest controllable speed is limited by the 1-byte size of the instruction: 
double SD84::getmaxspeed()
{
	return dwpc2rr(DWMAX); 
}

  // set a new position, and move to this new position with a 
  // velocity proportional to the difference between positions: 
void SD84::setgain(double newgain)
{
	gain = newgain; 
}
int SD84::smoothmove(int servo_number, double angle)
{
	  // get the current commanded position: 
	double oldangle = getangle(servo_number); 
	
	double tempspeed = gain*abs(oldangle - angle); 
//	cout << "SD84::smoothmove: speed for this move: " << tempspeed << " [rot/sec].  " << endl; 
	if (setspeed(servo_number, tempspeed) != 1)
		return -1; 
	
	if (setangle(servo_number, angle) != 1)
		return -1; 
	
	  // return the servo speed to the globally set one: 
//	if (setspeed(servo_number, speed) != 1)
//		return -1; 
	
	return 1; 
}

  // set the mode of *all* channels
int SD84::setmodes(ChannelMode mode)
{
  int result = 0; 
  
  if (mode == ANALOG_MODE)
    cout << "SD84::setmodes:  error, cannot presently set analog mode.  " << endl; 
  else
    {
      // set up the output buffer: 
      outputbuffer[3] = SET_MODE; 
      outputbuffer[4] = 1;           // first channel
      outputbuffer[5] = MAXSERVOS;   // number of channels to change
      for (int i = 0; i < MAXSERVOS; i++)
	outputbuffer[6+i] = mode; 
      
      result += thePort.send(outputbuffer, 6 + MAXSERVOS); 
      result += thePort.receive(1, inputbuffer); 
      if ( (inputbuffer[0] == OK) & (result == 2) )
	return 1; 
    }
  
  return -1; 
}

// set the mode of a channel: 
int SD84::setmode(int channel, ChannelMode mode)
{
  int result = 0; 
	
	if (mode == ANALOG_MODE)
		cout << "SD84::setmodes:  error: cannot presently set analog mode.  " << endl; 
	else
	{
		  // set up the output buffer: 
		outputbuffer[3] = SET_MODE; 
		outputbuffer[4] = channel;   // first channel
		outputbuffer[5] = 1;         // number of channels to change
		outputbuffer[6] = mode; 
		
		result += thePort.send(outputbuffer, 7); 
		result += thePort.receive(1, inputbuffer); 
		if ( (inputbuffer[0] == OK) & (result == 2) )
			return 1; 
	}
	
	return -1; 
}

  // get the value of a digital input channel: 
int SD84::getinput(int channel)
{
	int result = 0; 
	  // set up the output buffer: 
	outputbuffer[3] = GET_INPUT; 
	outputbuffer[4] = channel;   // first channel
	outputbuffer[5] = 0;         // number of bytes coming
	
	result += thePort.send(outputbuffer, 6); 
	result += thePort.receive(1, inputbuffer); 
	if ( (inputbuffer[0] == 255) & (result == 2) )
		return 1; 
	else if ( (inputbuffer[0] == 0) & (result == 2) )
		return 0; 
	
	return -1; 
}

  // test whether the board responds correctly using this, 
  // processor 1, 2, 3, or 4 should return 84 in first byte: 
int SD84::getversion(int processornumber)
{
  int result = 0; 
	
  // set up the output buffer: 
  outputbuffer[3] = GET_VERSION; 
  outputbuffer[4] = processornumber; 
  outputbuffer[5] = 0x00; 
  result += thePort.send(outputbuffer, 6); 
  result += thePort.receive(2, inputbuffer); 
  
  // if we get the right answer, then return the second byte, 
  // which contains the "version" number.  
  if ( (inputbuffer[0] == 84) & (result == 2) )
    return inputbuffer[1]; 
  
  return -1; 
}

  // get the path to the serial port: 
string SD84::getpath()
{
  return portpath;
}

