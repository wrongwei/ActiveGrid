/*------------------------------------------------------------------------*/
/* Author: Kevin Griffin                                                  */
/* kevinpg@princeton.edu                                                  */
/* 16/07/15                                                               */
/* loaf.cpp                                                               */
/*------------------------------------------------------------------------*/

#include "loaf.h"
#include <stddef.h>
#include <stdlib.h>
#include <iostream>
#inlcude "algo.h"
#include <stdio.h>

/*------------------------------------------------------------------------*/

// number of servos
enum {NUMBER_OF_SERVOS = 143};

/*------------------------------------------------------------------------*/

/* High Level Comment:
 * A Loaf_T is a data structure for storing the servo positions of multiple
 * time steps. The servo positions in a particular time step are called a slice.
 * A Loaf_T object contains multiple slices. 
 * This structure is used by runcorr_3D to do correlations in space and time.
 * Multiple Loaf_T 's will have distinct values and exisit in different
 * locations in memory. So remember, everytime you create a Loaf_T object,
 * you must destroy it when you are done using it (see the method Loaf_eat). 
 * The Loaf_T object contains slices. Each slice is an array of floats.
 * so a Loaf_T is pointer to an array of floats. Thus a Loaf_T is a float**
 */

/* Low Level Comment: 
 * How the Loaf_T works:
 * The Loaf_T is a float**
 * It points to the beginning of an array of float*
 * These point to floats that represent the servo positions at certain time step
 */

/* Assumptions:
 * 1D servo array starts with zero and ends with 142
 * Servos in a 2D array are referred to by order pair (column,row)
 * starting with 1,1 in the bottom right (looking upstream of the wind tunnel)
 * 2,1 is immediately to the right of 1,1
 */

/*------------------------------------------------------------------------*/

// This method is only available in this file. Returns a random angle (float)


/*------------------------------------------------------------------------*/

/* Returns a new Loaf_T object that contains numberOfSlices randomized slices
 * Each slice is a 2D array of the angles of all the servos.
 * These 2D arrays are 13 x 11 */

Loaf_T Loaf_bake(int numberOfSlices)
{
  Loaf_T myLoaf;      // a new Loaf_T object
  int iSlice;         // counter variable
  int iServo;         // counter variable
  
  // Allocate memory for the array containing the names of slices
  // So this is an array of float*
  myLoaf = (Loaf_T)malloc(numberOfSlices * sizeof(float*));
  // Allocate memory for the slices themselves
  // So these are many float* stored in the array allocated above above.
  for (iSlice =0; iSlice < numberOfSlices; iSlice++)
    {
      myLoaf[iSlice] = (float*)malloc(NUMBER_OF_SERVOS * sizeof(float));
      // Fill the current slice with random angles
      for (iServo = 0; iServo < NUMBER_OF_SERVOS; iServo++)
	{
	  myLoaf[iSlice][iServo] = ((float)rand()/RAND_MAX)*
	    (max_angle-min_angle) + min_angle;
	}
    }
  return myLoaf;
}

/*------------------------------------------------------------------------*/

/* Returns the angle value of the servo in myLoaf in column i,
 * in row j, in the time slice t
 * i goes from 1 to 13
 * j goes from 1 to 11
 * t = 1 for the oldest slice and t = numberOfSlices in the newest slice.
 */

float Loaf_access(Loaf_T myLoaf, int i, int j, int t)
{
  return myLoaf[t][(j-1)*13 + (i-1)]
}

/*------------------------------------------------------------------------*/

/* Sets the angle value of the servo in myLoaf in column i,
 * in row j, in the time slice t
 * i goes from 1 to 13
 * j goes from 1 to 11
 * t = 1 for the oldest slice and t = numberOfSlices in the newest slice.
 * Returns nothing.
 * NOTE: this method is only for testing the LOAF_T data type.
 *       RUNCORR_3D SHOULD NEVER CALL Loaf_set
 */

void Loaf_set(Loaf_T myLoaf, in i, int j, int t, float newAngle)
{
  myLoaf[t-1][(j-1)*13 + (i-1)] = newAngle;
}

/*------------------------------------------------------------------------*/

/* Frees the oldest slice in myLoaf and adds a new slice. The new slice contains
 * random angle positions. Returns nothing */

void Loaf_slice(Loaf_T myLoaf)
{
  
}

/*------------------------------------------------------------------------*/

/* Prints out the contents of myLoaf. Returns nothing */

void Loaf_print(Loaf_T myLoaf, int numberOfSlices)
{
  int iSlice;
  int iRow;
  int iColumn;
  for (iSlice = 1; iSlice <= numberOfSlices; iSlice ++)
    {
      cout << "Time Slice " << iSlice << endl << endl;
      for (iRow = 11; iRow >= 1; iRow--)
	{
	  cout << iServo << "| ";
	  for (iColumn = 1; iColumn <= 13; iColumn++)
	    {
	      printf("%7.5f", Loaf_access(iColumn, iRow, iSlice));
	    }
	  cout << endl;
	}
      cout << "-----------------------------------------------------------";
	for endl << endl;
    }
}

/*------------------------------------------------------------------------*/

/* Loaf_eat frees all memory used by myLoaf and returns nothing */

void Loaf_eat(Loaf_T myLoaf)
{

}

