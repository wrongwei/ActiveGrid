
% experiment x wire calibration file
% 
% output is at least a vector with fluid velocities, 
% and a vector with bridge voltages.  
% 
% Compiles and stores information from n StreamWare velocity calibrations,
% carried out at n angles, for use in isotropy data analysis
% Requires n velocity calibration .txt files with 9 columns (generated by
% exporting the tables from StreamWare) to be present in the current directory
%
% Template created by Nathan Wei and Kevin Griffin, August 2015

clear exptinfo fluidinfo probeinfo calibdata

  % ---- information about the setup: 
  % info about the experiment: 
exptinfo.date   = [2015 8 21];   % date of the experiment [year month day].  
exptinfo.medium = 'Air';         % the gas as a string.  
exptinfo.pnom   = 1000;          % [mbar] nominal pressure of the gas.  

  % ---- information about the fluid: 
fluidinfo.medium = 'Air';        % the gas as a string.  
fluidinfo.p      = 1000;         % [mbar] actual pressure of the gas.  
fluidinfo.T      = nan;          % [C] temperature of the fluid.  
dens = 1.2041; 
visc = 15.11*10^-6; 
fluidinfo.nu     = visc;         % [m^2/s] fluid viscosity.  
fluidinfo.dens   = dens;         % [kg/m^3] fluid density.  

  % ---- info about the probes: 
probeinfo.notes = '1 P11 wire.  '; 
probeinfo.samplerate = 20;       % [kHz] rate at which samples were collected.  
probeinfo.numsmpls = 512;        % number of samples collected at each calibration point
probeinfo.alpha = 3.6e-3;        % temperature coefficient of resistance for wire

  % info about each probe: 
probeinfo.probe(1).probename = 'S'; 

  % info about each sensor: 
probeinfo.probe(1).sensor(1).channel    = 1; 
probeinfo.probe(1).sensor(1).resistance = 5.752;  % [Ohms]
probeinfo.probe(1).sensor(1).offset     = 0.923;  % [Volts]
probeinfo.probe(1).sensor(1).gain       = 64;
probeinfo.probe(1).sensor(1).overheat   = 0.8;

probeinfo.probe(1).sensor(2).channel    = 1; 
probeinfo.probe(1).sensor(2).resistance = 5.539;  % [Ohms]
probeinfo.probe(1).sensor(2).offset     = 0.903;  % [Volts]
probeinfo.probe(1).sensor(2).gain       = 64;
probeinfo.probe(1).sensor(2).overheat   = 0.8;

% velocity calibration .txt files (one per angle in calibration)
calibdata.angles = [-30 -20 -10 0 10 20 30]; % angles used in calibration (in degrees)
filebase = 'velocity_calibration_8_21b_';    % common name of calibration files
for i = 1 : length(calibdata.angles)
    fileID = fopen(strcat(filebase,num2str(i),'.txt')); % find files from StreamWare
    data = textscan(fileID,'%f %f %f %f %f %f %f %f %f');
    fclose(fileID);
    % fluid velocity [m/s]: (if you want Matlab to do curve fitting)
    calibdata.v(i, 1, :)  =  cell2mat(data(1));
    calibdata.v(i, 2, :)  =  cell2mat(data(1));
    % calibration potential measurements for each wire [V]
    calibdata.E(i, 1, :)  =  cell2mat(data(2));
    calibdata.E(i, 2, :)  =  cell2mat(data(3));
    % calibration temperatures [C]
    calibdata.calibtemp(i, 1, :) = cell2mat(data(4));
end

% NOTE: if you change this, you must update the polynomial calculations in
% loadvelocityxwire.m (we're using a written-out 2nd-order evaluation since
% polyval() is too slow)
calibdata.polyfit = 2; % order of polynomial fit (recommended setting: 2)

  % ---- derived quantities: 
  % number of probes: 
probeinfo.numprobes = length(probeinfo.probe); 
  % number of sensors on each probe: 
for icalib = 1:probeinfo.numprobes
	probeinfo.probe(icalib).numsensors = length(probeinfo.probe(icalib).sensor); 
end
  % total number of channels used: 
n = 0; for icalib = 1:probeinfo.numprobes, n = n + probeinfo.probe(icalib).numsensors; end
probeinfo.numchannels = n; 

  % ---- angular calibration: 
  % probe wire angles, in degrees: 
probeinfo.probe(1).sensor(1).angle = 45; 
probeinfo.probe(1).sensor(2).angle = 45;

  % ---- temperature calibration: (don't think this does anything for us)
  % by CHANNEL: 
calibdata.Twire = [nan]; 

  % copy effective wire temperature in degrees C for each wire: 
for icalib = 1:probeinfo.numprobes
	for jcalib = 1:probeinfo.probe(icalib).numsensors
		probeinfo.probe(icalib).sensor(jcalib).Twire = ...  
		    calibdata.Twire(probeinfo.probe(icalib).sensor(jcalib).channel); 
	end
end

%{
    NOT IMPLEMENTED  
% ---- velocity calibration, all values in order of CHANNEL: 
  % fan speed in Hz, or in percent: 
calibdata.fanspeed  =  []; 

  % Pitot tube pressure difference [mbar]: 
poffset = 0.00;   % [mbar] *extrapolated* zero value of differential pressure transducer
calibdata.dp     =     []; % - poffset; 

  % fluid density [kg/m^3]: 
calibdata.dens    =    [fluidinfo.dens]; 
%}